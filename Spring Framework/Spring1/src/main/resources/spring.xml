<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
    Bean definition for the 'alien' object.

    - autowire="byType": Spring will try to match a bean based on the property type (class).
    If more than one bean of that type exists (like com and com1), Spring throws NoUniqueBeanDefinitionException.

    Alternative values:
    - autowire="byName": Injects bean by matching the property name with the bean id.
    - autowire="constructor": Uses constructor-based autowiring.
    - autowire="no": Default, requires explicit <property> or <constructor-arg> setup.
    -->

    <bean id="alien" class="org.example.Alien" autowire="byType">

        <!--
        Setter Injection Example:
        Setting primitive or string properties using setter methods.
        In this case, it sets `age` field of Alien using setAge(int).
        -->
        <property name="age" value="21"/>

        <!--
        Uncomment this to explicitly inject a bean named 'com1' into Alien's 'com' property.
        This avoids ambiguity if autowiring by type fails due to multiple matching beans.
        Explicitly injects the 'com1' bean (Desktop) into the 'com' property of the 'alien' bean.
        This overrides autowiring ambiguity if multiple matching beans exist
        -->
        <property name="com" ref="com1"/>

        <!-- ====================== CONSTRUCTOR INJECTION OPTIONS ====================== -->

        <!--
        Constructor Injection (Basic Form):
        - Relies on the order of constructor arguments.
        - Can be problematic if multiple constructors exist or parameters have the same type.
        -->
        <!--
        <constructor-arg type="org.example.Laptop" ref="lap1"/>
        <constructor-arg type="int" value="22"/>
        -->

        <!--
        Constructor Injection (Using index):
        - Resolves ambiguity by specifying the position of arguments in constructor.
        - Most reliable when parameter types are the same or overloaded.
        -->
        <!--
        <constructor-arg index="1" ref="lap1"/>
        <constructor-arg index="0" value="23"/>
        -->

        <!--
        Constructor Injection (Using name):
        - Matches constructor parameters by their name.
        - Requires debug symbols or @ConstructorProperties annotation in newer Java versions.
        -->
        <!--
        <constructor-arg name="lap" ref="lap1"/>
        <constructor-arg name="age" value="24"/>
        -->

    </bean>

    <!--
    Bean Definitions for injection candidates.
    Uncomment the one you want Spring to use, or resolve ambiguity using byName or @Qualifier in code.
    -->

    <!--
    Bean definition for Laptop.
    The 'primary="true"' attribute is used to mark this bean as the **default candidate**
    when multiple beans of the same type exist and Spring needs to autowire by type.

    Use case:
    If you autowire a Computer-type bean and both 'com' (Laptop) and 'com1' (Desktop) exist,
    Spring will prefer the one marked as primary (Laptop in this case).
    -->
    <bean id="com" class="org.example.Laptop" primary="true"/>

    <!--
    Another Computer-type bean (Desktop).
    Since this is not marked as primary, it will not be auto-injected unless explicitly referenced.
    -->
    <!--
    Bean definition for 'com1' (Desktop).
    Attribute: lazy-init="true"

    Explanation:
    - This tells Spring **not to initialize** the bean at application startup.
    - Instead, the bean will be created **only when it is first requested** (i.e., lazily).
    - Useful for optimizing startup time, especially for heavy or rarely used beans.

    Note:
    - By default, Spring initializes all singleton beans eagerly at context startup.
    - lazy-init="true" overrides that behavior for this specific bean.
    -->
    <bean id="com1" class="org.example.Desktop" lazy-init="true"/>

</beans>
